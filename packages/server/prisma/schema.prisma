// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  password    String
  readingTime Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Book {
  id            String            @id @default(cuid())
  title         String
  authors       String[]
  tags          String[]
  summary       String?
  key           String?
  numberOfPages Int
  currentPage   Int               @default(1)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now())
  createdBy     String
  highlights    Highlight[]
  categories    BookCategories[]
  bookshelves   BookBookshelves[]
}

model Category {
  id        String           @id @default(cuid())
  name      String
  books     BookCategories[]
  createdAt DateTime         @default(now())
  createdBy String
}

model BookCategories {
  book       Book     @relation(fields: [bookId], references: [id])
  bookId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([bookId, categoryId])
}

model Highlight {
  id        String   @id @default(cuid())
  Book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  body      String
  comment   String?
  color     String
  createdAt DateTime @default(now())
  createdBy String
}

model Bookshelf {
  id        String            @id @default(cuid())
  name      String
  books     BookBookshelves[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
  createdBy String
}

model BookBookshelves {
  Bookshelf   Bookshelf @relation(fields: [bookshelfId], references: [id])
  bookshelfId String
  Book        Book      @relation(fields: [bookId], references: [id])
  bookId      String
  assignedAt  DateTime  @default(now())
  assignedBy  String

  @@id([bookId, bookshelfId])
}
